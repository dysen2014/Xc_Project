package com.dysen.login_register;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Handler;import android.os.Message;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.method.HideReturnsTransformationMethod;import android.text.method.PasswordTransformationMethod;import android.text.style.ForegroundColorSpan;import android.util.DisplayMetrics;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.alibaba.fastjson.JSON;import com.dysen.afinalUtil.tGateWay;import com.dysen.afinalUtil.tLogin;import com.dysen.afinalUtil.tUser;import com.dysen.gifView.util.GifView;import com.dysen.gifView.util.GifView.GifImageType;import com.dysen.info.DataInfo;import com.dysen.info.Plogin;import com.dysen.myUtil.MyTools;import com.dysen.qj.wMeter.R;import com.dysen.myUtil.MyActivityTools;import com.dysen.myUtil.SharedPreferencesDemo;import com.dysen.myUtil.ToastDemo;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStream;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.List;/** *  * 邮箱: dysen@outlook.com | dy.sen@qq.com *  * 作者: 沈迪 [ sendy ] *  * 日期: 2015-6-23 下午2:03:40 *  * 描述: 用户登录 *  */@SuppressLint("NewApi")public class LoginDemo extends MyActivityTools implements OnClickListener {	Button btnLogin, btnRegister, btnShow, btnForget, btnBack;	CheckBox isCheckBox;	EditText etNameLogin, etPwdLogin;	TextView tvHint;	CountDownTimer cdTimer;	private Handler handler;	DataInfo data;	private int progress;	Integer loginId;	String uNameLogin, uPwdLogin, strMsg, userName;	private boolean flag_check, isAdd, running, isCipher;	private String HTTP_IP;	private byte[] sendData;	String updateUrl;	MyActivityTools<tLogin> myTools;	tLogin loginT;	tGateWay gateWayT;	tUser userT;	String name, pwd;	/**	 * sen dy	 * 	 * 2015-6-23 下午2:12:27	 */	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_login);		boolean bl = MyActivityTools.FlymeSetStatusBarLightMode(getWindow(), true);//		ToastDemo.myHint(this,   "bl:"+bl);		boolean b =MIUISetStatusBarLightMode(getWindow(), true);//		ToastDemo.myHint(this,   "b:"+b);		loginT = MyActivityTools.login;//new tLogin();		myTools = new MyActivityTools<tLogin>();		TextView textView  = ((TextView) this.findViewById(R.id.tv_hint));		// 颜色选择时 必须Color。(而  R.color. 是无效的)		textView.setText(MyTools.setStrhHighlighted("用户登录", Color.RED, 1, 3));		setTitle("登录");		etNameLogin = (EditText) this.findViewById(R.id.et_username_login);		etPwdLogin = (EditText) this.findViewById(R.id.et_pwd_login);		btnLogin = (Button) this.findViewById(R.id.btn_login);		btnShow = (Button) this.findViewById(R.id.btn_show);		btnForget = (Button) this.findViewById(R.id.btn_forget);		btnRegister = (Button) this.findViewById(R.id.btn_register);		tvHint = (TextView) this.findViewById(R.id.tv_hint);		HTTP_IP = this.getText(R.string.HTTP_IP).toString();		isCheckBox = (CheckBox) this.findViewById(R.id.ck_pwd);		btnForget.setText(Html				.fromHtml("<font  color=\"green\"><u >忘记密码</u></font>"));		btnRegister.setText(Html				.fromHtml("<font  color=\"green\"><u>快速注册</u></font>"));		btnLogin.setOnClickListener(this);		btnShow.setOnClickListener(this);		btnForget.setOnClickListener(this);		btnRegister.setOnClickListener(this);		String data = SharedPreferencesDemo.myGetLoginData(this);		System.out.println("获得到的数据：" + data);		if (data.length() >= 8) {			Object[] obj = data.split(",");						flag_check = obj[2].toString().length() > 4 ? false : true;			if (flag_check) {				etPwdLogin.setText(obj[1].toString());				etNameLogin.setText(obj[0].toString());				isCheckBox.setChecked(flag_check);			}		}		isCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {			@Override			public void onCheckedChanged(CompoundButton arg0, boolean arg1) {				name = etNameLogin.getText().toString().trim();				pwd = etPwdLogin.getText().toString().trim();				if (!"".equals(name) && !"".equals(pwd)) {					System.out.println("账号：" + name + "密码：" + pwd);					if (isCheckBox.isChecked()) {						isCheckBox.setText("已记住");						// ToastDemo.myHint(this, "已选咯记住密码").show();						flag_check = true;						isCheckBox.setChecked(flag_check);					} else {						isCheckBox.setText("未记住");						etNameLogin.setHint(" 用户名：");						etPwdLogin.setHint(" 用户密码： ");						flag_check = false;						isCheckBox.setChecked(flag_check);						// ToastDemo.myHint(this, "未选择咯记住密码").show();					}										if (SharedPreferencesDemo.mySetLoginData(LoginDemo.this, name, pwd, flag_check)) {//					ToastDemo.myHint(LoginDemo.this, "记住密码");					String data = SharedPreferencesDemo.myGetLoginData(LoginDemo.this);					System.out.println("获得到的数据："+data);					if (data.length() >= 5) {												Object[] obj = data.split(",");						etNameLogin.setText(obj[0].toString());						etPwdLogin.setText((String)obj[1]);						flag_check = obj[2].toString().length() > 4 ? false : true ;					}				}				} else {					ToastDemo.myHint(LoginDemo.this, "账号或密码不能为空");				}			}		});		myHandler();	}	/**	 *	dysen	 *	2015-9-11 上午10:50:27	 *	info: 	 */	private void myHandler() {				handler = new Handler() {			@Override			public void handleMessage(Message msg) {				DataInfo data;				data = (DataInfo) msg.obj;				if (data == null) {					// ToastDemo.myHint(this, "无数据");				} else {					strMsg = data.getMsg().toString();					if (data.getSuccess()) {						if ("登录成功".equals(strMsg)) {							if (flag_check){								myAddLoginDData();//添加登录数据							}							// cdTimer.cancel();							ToastDemo.myHint(LoginDemo.this, strMsg);							alert.dismiss(); // 登陆成功后关闭提示框							Plogin pl = JSON.parseObject(									JSON.toJSONString(data.getObj()),									Plogin.class);							// 返回数据							myResult(pl.getId(), pl.getName(), true);						} else {							ToastDemo.myHint(LoginDemo.this, strMsg);						}					} else {						if ("登录失败".equals(strMsg)) {							ToastDemo.myHint(LoginDemo.this, strMsg);							// cdTimer.cancel();							finish();							startActivity(new Intent(LoginDemo.this,									LoginDemo.class));						} else {							ToastDemo.myHint(LoginDemo.this, strMsg);						}					}				}			}		};	}	/**	 * 添加登录数据	 */	public void myAddLoginDData(){		name = etNameLogin.getText().toString().trim();		pwd = etPwdLogin.getText().toString().trim();		loginT.setLoginName(name);		loginT.setLoginPwd(pwd);		/**		 * 判断添加的数据是否在数据库已存在		 */		List<tLogin> lLogin = myTools.findAllData(tLogin.class);		String mLoginName="", mLoginPwd="";		boolean isExist = false;		if (lLogin.size() > 0) {			for (int i = 0; i < lLogin.size(); i++) {				mLoginName = lLogin.get(i).getLoginName();				mLoginPwd = lLogin.get(i).getLoginPwd();				if (name.equals(mLoginName) && pwd.equals(mLoginPwd)) {					System.out.println("数据记录已存在");					isExist = true;				}			}			if(!isExist){				myTools.addLoginData(loginT);//添加登录数据			}		}else {			myTools.addLoginData(loginT);//添加登录数据		}	}	public void edtName(View v){		flag_check = false;		isCheckBox.setChecked(flag_check);	}	public void btnShowName(View v){		listLoginName(myTools.findAllData(tLogin.class));	}	int index=0;	String[] str = new String[100];	AlertDialog mAlert;	public void listLoginName(List<tLogin> allData) {		str = new String[allData.size()];		if (allData.size() > 0) {			for (int i = 0; i < allData.size(); i++) {				System.out.println(i+":"+allData.get(i).getLoginName());				str[i] = allData.get(i).getLoginName();			}			LayoutInflater inflater = getLayoutInflater();			View layout = inflater.inflate(R.layout.show_login_name, null);			Button btnCanel, btnConfirm;			btnCanel = (Button)layout.findViewById(R.id.btn_canel);			btnConfirm = (Button)layout.findViewById(R.id.btn_confirm);			btnCanel.setOnClickListener(new OnClickListener() {				@Override				public void onClick(View v) {					mAlert.dismiss();				}			});			btnConfirm.setOnClickListener(new OnClickListener() {				@Override				public void onClick(View v) {					mAlert.dismiss();					etNameLogin.setText(str[index]);					etPwdLogin.setText(myTools.db.findAllByWhere(tLogin.class, (index+1)+"").get(index).getLoginPwd());					System.out.println("对应的密码："+myTools.db.findAllByWhere(tLogin.class, (index+1)+"").get(index).getLoginPwd());				}			});			mAlert = new AlertDialog.Builder(this)					.setTitle("请选择账号")					.setView(layout)					.setIcon(android.R.drawable.ic_dialog_info)					.setSingleChoiceItems(str, 0,							new DialogInterface.OnClickListener() {								@Override								public void onClick(DialogInterface dialog, int which) {									index = which;								}							}).setInverseBackgroundForced(true)					.show();		}else {			ToastDemo.myHint(this, "无账号记录");		}	}	public void edtPwd(View v){		flag_check = false;		isCheckBox.setChecked(flag_check);	}	void myResult(int loginId, String userName, boolean isSuccessLogin) {		// 数据是使用Intent返回		Intent intent = new Intent();		// 把返回数据存入Intent		intent.putExtra("login_id", loginId);		intent.putExtra("user_name", userName);		intent.putExtra("flag_login", isSuccessLogin);		System.out.println("返回：" +loginId+"---"+userName+"---"+isSuccessLogin);		// 设置返回数据		LoginDemo.this.setResult(1, intent);		// 关闭Activity		LoginDemo.this.finish();	}	/**	 * dysen 2015-8-22 上午10:18:21 info: 返回到上个Activity	 */	public void myBack(View v) {		myResult(-1, "", false);// 返回数据		finish();	}		/**	 *	dysen	 *	2015-9-11 上午11:02:06	 *	info:	更换账户	 */	public void btnMoreUser(View v){					}	/**	 * sen dy	 * 	 * 2015-6-23 下午4:50:30	 */	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.btn_login:			myLogin();			break;		case R.id.btn_show:			myCipher();			break;		case R.id.btn_forget:			Intent it = new Intent(this, ForgetPwdDemo.class);			it.putExtra("user_name", etNameLogin.getText().toString().trim());			startActivity(it);			break;		case R.id.btn_register:			startActivity(new Intent(this, RegisterDemo.class));			break;		}	}	/**	 * sen dy	 * 	 * 2015-6-23 下午4:56:10	 * 	 * info: 密文明文显示密码	 */	private void myCipher() {		if (isCipher) {			etPwdLogin.setTransformationMethod(PasswordTransformationMethod					.getInstance()); // 密文显示			btnShow.setBackgroundResource(R.drawable.eyes_press);			isCipher = false;			ToastDemo.myHint(this, "密文显示");		} else {			etPwdLogin.setTransformationMethod(HideReturnsTransformationMethod					.getInstance());// 明文显示			btnShow.setBackgroundResource(R.drawable.eyes_normal);			isCipher = true;			ToastDemo.myHint(this, "明文显示");		}	}	/**	 * dysen 2015-3-26 上午10:50:00 info: 用户登录 函数	 */	private void myLogin() {//		setContentView(R.layout.gif_view);				uNameLogin = etNameLogin.getText().toString().trim();		uPwdLogin = etPwdLogin.getText().toString().trim();		if (!"".equals(uNameLogin) && !"".equals(uPwdLogin)) {			sendData = ("name=" + uNameLogin + "&&pw=" + uPwdLogin + "&&type=" + 3).getBytes();			String s = ("name=" + uNameLogin + "&&pw=" + uPwdLogin + "&&type=" + 3);			updateUrl = HTTP_IP + "/app/login/login1?";			myResult(1, "dysen", true);//			new Thread(Connect).start();// 启动下载内容线程//			resultJson((JSON.parseObject(HttpRequest.sendGet(updateUrl, s), DataInfo.class)));			TextView tvHint = (TextView) findViewById(R.id.tv_hint);			tvHint.setText("登录中...");			View v = LayoutInflater.from(this).inflate(					R.layout.gif_view, null);			myStartGif(this, v, "正在登录 ");//	启动gif动画			System.out.println("name" + uNameLogin + "&&pw" + uPwdLogin);		} else if ("".equals(uNameLogin) || "".equals(uPwdLogin)) {			Toast.makeText(this, "用户名或密码不为空 ！！！", Toast.LENGTH_LONG).show();			// setContentView(R.layout.activity_login);		} else {			Toast.makeText(this, "用户名或密码错误 ！！！", Toast.LENGTH_LONG).show();			// setContentView(R.layout.activity_login);		}	}	public static AlertDialog alert;	/**	 * dysen 2015-7-11 上午11:45:15 info: 启动 动画 gif 播放	 */	public static void myStartGif(Context context, View v, String str) {		// 把该 Activity 添加到 activity列表里 方便退出时一下子退出所有activity		// QuitAllActivity.getInstance().addActivity(this);		alert = new AlertDialog.Builder(context).setTitle(str).setView(v).show();				// 从xml中得到GifView的句柄		GifView gf1 = (GifView) v.findViewById(R.id.gif1);		// 设置Gif图片源		gf1.setGifImage(R.drawable.loading);		// 设置显示的大小，拉伸或者压缩		gf1.setShowDimension(300, 300);		// 设置加载方式：先加载后显示、边加载边显示、只显示第一帧再显示		gf1.setGifImageType(GifImageType.COVER);	}	/**	 * 获取屏幕的宽 sen dy 2015-1-28 下午12:34:17	 */	public int myScreenWidth() {		// 要获取屏幕的宽和高等参数，首先需要声明一个DisplayMetrics对象，屏幕的宽高等属性存放在这个对象中		DisplayMetrics DM = new DisplayMetrics();		// 获取窗口管理器,获取当前的窗口,调用getDefaultDisplay()后，其将关于屏幕的一些信息写进DM对象中,最后通过getMetrics(DM)获取		getWindowManager().getDefaultDisplay().getMetrics(DM);		float scale, pxValue;		pxValue = getApplicationContext().getResources().getDisplayMetrics().widthPixels;		scale = this.getResources().getDisplayMetrics().density;		int wdip = (int) (pxValue / scale + 0.5f);		return (int) pxValue;	}	/**	 * 获取屏幕的高 sen dy 2015-1-28 下午12:34:17	 */	public int myScreenHeight() {		float scale, pxValue;		pxValue = getApplicationContext().getResources().getDisplayMetrics().heightPixels;		scale = this.getResources().getDisplayMetrics().density;		int hdip = (int) (pxValue / scale + 0.5f);		return (int) pxValue;	}	Runnable Connect = new Runnable() {		private String str;		private static final int TIMEOUT = 10000;// 10秒		private static final String encoding = "utf-8";		URL url;		HttpURLConnection conn;		@Override		public void run() {			 System.out.println("---------run -------\nurl:"+updateUrl+new String(sendData));			try {				url = new URL(updateUrl);				conn = (HttpURLConnection) url.openConnection();				conn.setRequestMethod("POST");				conn.setConnectTimeout(TIMEOUT);				conn.setDoOutput(true);				conn.setDoInput(true);				conn.setRequestProperty("Content-Type",						"application/x-www-form-urlencoded");				conn.setRequestProperty("Charset", encoding);				conn.setRequestProperty("Content-Length",						String.valueOf(sendData.length));				conn.connect();				System.out.println(new String(sendData) + "开始下载");				OutputStream outStream = conn.getOutputStream();				outStream.write(sendData);				outStream.flush();				outStream.close();				// 从 服务器 获取数据				BufferedReader in = new BufferedReader(new InputStreamReader(						conn.getInputStream(), encoding));				String retData = null;				String responseData = "";				while ((retData = in.readLine()) != null) {					responseData += retData;					System.out.println(responseData + "下载的内容");				}				String str = responseData;				data = JSON.parseObject(responseData, DataInfo.class);				System.out.println("下载到的内容：" + data);				resultJson(data);			} catch (MalformedURLException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	};	/**	 * readParse（String）从服务器端获取数据 Analysis（String）解析json数据	 */	private void resultJson(DataInfo data) {		try {			Message message = Message.obtain();			message.obj = data;			handler.sendMessage(message);		} catch (Exception e) {			e.printStackTrace();		}	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			myResult(-1, "", false);// 返回数据			finish();		}		return false;	}}